generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  id          String     @id @default(cuid())
  code        String?
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Products[]

  @@map("categories")
}

model Store {
  id          String       @id @default(cuid())
  name        String
  address     String
  phone       String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fieldVisits FieldVisit[]

  @@map("stores")
}

model Customers {
  id             String           @id @default(cuid())
  code           String           @unique
  name           String
  email          String?
  phone          String?
  address        String
  city           String
  latitude       Float?
  longitude      Float?
  creditLimit    Float            @default(0)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  customerVisits CustomerVisits[]
  deliveryNotes  DeliveryNotes[]
  invoices       Invoices[]
  orders         Orders[]

  @@map("customers")
}

model Products {
  id               String             @id @default(cuid())
  name             String
  description      String?
  unit             String
  price            Float
  cost             Float
  minStock         Int                @default(0)
  currentStock     Int                @default(0)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  categoryId       String
  invoiceItems     InvoiceItems[]
  orderItems       OrderItems[]
  category         Categories         @relation(fields: [categoryId], references: [id])
  salesReturnItems SalesReturnItems[]
  stockMovements   StockMovements[]
  stockOpnameItems StockOpnameItems[]

  @@map("products")
}

model Users {
  id                    String              @id @default(cuid())
  email                 String              @unique
  name                  String
  password              String
  role                  UserRole            @default(SALES)
  phone                 String?
  address               String?
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  customerVisits        CustomerVisits[]
  deliveryNotes         DeliveryNotes[]
  fieldVisits           FieldVisit[]
  orders                Orders[]
  processedSalesReturns SalesReturns[]      @relation("AdminProcessor")
  requestedSalesReturns SalesReturns[]      @relation("SalesRequester")
  salesTargets          SalesTargets[]
  stockMovements        StockMovements[]
  stockOpnames          StockOpnames[]
  transactions          Transactions[]
  userNotifications     UserNotifications[]

  @@map("users")
}

model SalesTargets {
  id             String     @id @default(cuid())
  userId         String
  targetType     TargetType @default(MONTHLY)
  targetPeriod   String
  targetAmount   Float
  achievedAmount Float      @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           Users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetPeriod])
  @@map("sales_targets")
}

model Orders {
  id                   String         @id @default(cuid())
  orderNumber          String         @unique
  orderDate            DateTime       @default(now())
  deliveryDate         DateTime?
  status               OrderStatus    @default(NEW)
  totalAmount          Float          @default(0)
  notes                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  customerId           String
  salesId              String
  adminNotes           String?
  canceledAt           DateTime?
  completedAt          DateTime?
  confirmedAt          DateTime?
  confirmedBy          String?
  requiresConfirmation Boolean        @default(false)
  deliveryNotes        DeliveryNotes?
  invoice              Invoices?
  orderItems           OrderItems[]
  customer             Customers      @relation(fields: [customerId], references: [id])
  sales                Users          @relation(fields: [salesId], references: [id])
  salesReturns         SalesReturns[]

  @@map("orders")
}

model OrderItems {
  id         String   @id @default(cuid())
  quantity   Float
  price      Float
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orderId    String
  productId  String
  orders     Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  products   Products @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model DeliveryNotes {
  id              String         @id @default(cuid())
  deliveryNumber  String         @unique
  deliveryDate    DateTime       @default(now())
  status          DeliveryStatus @default(PENDING)
  driverName      String
  vehicleNumber   String
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  customerId      String
  orderId         String         @unique
  warehouseUserId String
  customers       Customers      @relation(fields: [customerId], references: [id])
  orders          Orders         @relation(fields: [orderId], references: [id])
  users           Users          @relation(fields: [warehouseUserId], references: [id])

  @@map("delivery_notes")
}

model Invoices {
  id              String         @id @default(cuid())
  invoiceNumber   String         @unique
  invoiceDate     DateTime       @default(now())
  dueDate         DateTime
  status          InvoiceStatus  @default(DRAFT)
  subtotal        Float          @default(0)
  tax             Float          @default(0)
  totalAmount     Float          @default(0)
  paidAmount      Float          @default(0)
  remainingAmount Float          @default(0)
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  customerId      String
  orderId         String?        @unique
  invoiceItems    InvoiceItems[]
  customer        Customers      @relation(fields: [customerId], references: [id])
  order           Orders?        @relation(fields: [orderId], references: [id])
  payments        Payments[]
  salesReturns    SalesReturns[]

  @@map("invoices")
}

model InvoiceItems {
  id         String   @id @default(cuid())
  quantity   Float
  price      Float
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoiceId  String
  productId  String
  invoices   Invoices @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  products   Products @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

model Payments {
  id          String   @id @default(cuid())
  paymentDate DateTime @default(now())
  amount      Float
  method      String
  reference   String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoiceId   String
  invoice     Invoices @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model Transactions {
  id               String             @id @default(cuid())
  transactionDate  DateTime           @default(now())
  type             TransactionType
  amount           Float
  description      String
  category         String
  reference        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           String?
  transactionItems TransactionItems[]
  user             Users?             @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model TransactionItems {
  id            String       @id @default(cuid())
  description   String
  quantity      Float
  price         Float
  totalPrice    Float
  transactionId String
  transaction   Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("transaction_items")
}

model StockMovements {
  id            String            @id @default(cuid())
  movementDate  DateTime          @default(now())
  type          StockMovementType
  quantity      Float
  previousStock Int
  newStock      Int
  reference     String?
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  productId     String
  userId        String
  products      Products          @relation(fields: [productId], references: [id])
  users         Users             @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model StockOpnames {
  id               String             @id @default(cuid())
  opnameDate       DateTime           @default(now())
  status           OpnameStatus       @default(IN_PROGRESS)
  notes            String?
  conductedById    String
  stockOpnameItems StockOpnameItems[]
  conductedBy      Users              @relation(fields: [conductedById], references: [id])

  @@map("stock_opnames")
}

model StockOpnameItems {
  id            String       @id @default(cuid())
  systemStock   Int
  physicalStock Int
  difference    Int
  opnameId      String
  productId     String
  stockOpname   StockOpnames @relation(fields: [opnameId], references: [id], onDelete: Cascade)
  product       Products     @relation(fields: [productId], references: [id])

  @@map("stock_opname_items")
}

model SalesReturns {
  id               String             @id @default(cuid())
  returnDate       DateTime           @default(now())
  reason           String
  status           ReturnStatus       @default(REQUESTED)
  notes            String?
  orderId          String?
  invoiceId        String
  requesterId      String
  processorId      String?
  salesReturnItems SalesReturnItems[]
  invoice          Invoices           @relation(fields: [invoiceId], references: [id])
  order            Orders?            @relation(fields: [orderId], references: [id])
  processor        Users?             @relation("AdminProcessor", fields: [processorId], references: [id])
  requester        Users              @relation("SalesRequester", fields: [requesterId], references: [id])

  @@map("sales_returns")
}

model SalesReturnItems {
  id          String       @id @default(cuid())
  quantity    Float
  returnId    String
  productId   String
  product     Products     @relation(fields: [productId], references: [id])
  salesReturn SalesReturns @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@map("sales_return_items")
}

model FieldVisit {
  id           String    @id @default(cuid())
  salesId      String
  storeId      String?
  storeName    String?
  storeAddress String?
  visitDate    DateTime  @default(now())
  checkInTime  DateTime  @default(now())
  checkOutTime DateTime?
  latitude     Float
  longitude    Float
  photos       String[]  @default([])
  notes        String?
  visitPurpose String
  result       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sales        Users     @relation(fields: [salesId], references: [id], onDelete: Cascade)
  store        Store?    @relation(fields: [storeId], references: [id])

  @@map("field_visits")
}

model CustomerVisits {
  id         String    @id @default(cuid())
  visitDate  DateTime  @default(now())
  latitude   Float
  longitude  Float
  notes      String?
  photoUrl   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customerId String
  salesId    String
  customers  Customers @relation(fields: [customerId], references: [id])
  users      Users     @relation(fields: [salesId], references: [id])

  @@map("customer_visits")
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model Notifications {
  id                String              @id @default(cuid())
  title             String
  message           String
  type              String
  isGlobal          Boolean             @default(false)
  isRead            Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userNotifications UserNotifications[]

  @@map("notifications")
}

model UserNotifications {
  id             String        @id @default(cuid())
  isRead         Boolean       @default(false)
  readAt         DateTime?
  createdAt      DateTime      @default(now())
  userId         String
  notificationId String
  notifications  Notifications @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  users          Users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
  @@map("user_notifications")
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum OrderStatus {
  NEW
  PROCESSING
  COMPLETED
  CANCELLED
  PENDING_CONFIRMATION
  IN_PROCESS
  CANCELED
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum UserRole {
  OWNER
  ADMIN
  SALES
  WAREHOUSE
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  COMPLETED
}

enum OpnameStatus {
  IN_PROGRESS
  COMPLETED
  RECONCILED
}

enum TargetType {
  MONTHLY
  QUARTERLY
  YEARLY
}
