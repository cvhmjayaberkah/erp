generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  id          String     @id @default(cuid())
  code        String     @unique
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Products[]

  @@map("categories")
}

model Store {
  id          String       @id @default(cuid())
  name        String
  address     String
  phone       String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fieldVisits FieldVisit[]

  @@map("stores")
}

model Customers {
  id             String           @id @default(cuid())
  code           String           @unique
  name           String
  email          String?
  phone          String?
  address        String
  city           String
  latitude       Float?
  longitude      Float?
  creditLimit    Float            @default(0)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  customerVisits CustomerVisits[]
  deliveryNotes  DeliveryNotes[]
  invoices       Invoices[]
  orders         Orders[]

  @@map("customers")
}

model Products {
  id                   String                 @id @default(cuid())
  code                 String                 @unique
  name                 String
  description          String?
  unit                 String
  price                Float
  cost                 Float
  minStock             Int                    @default(0)
  currentStock         Int                    @default(0)
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  categoryId           String
  invoiceItems         InvoiceItems[]
  ManagementStockItems ManagementStockItems[]
  orderItems           OrderItems[]
  ProductionItems      ProductionItems[]
  category             Categories             @relation(fields: [categoryId], references: [id])
  PurchaseOrderItems   PurchaseOrderItems[]
  salesReturnItems     SalesReturnItems[]
  stockMovements       StockMovements[]
  stockOpnameItems     StockOpnameItems[]

  @@map("products")
}

model Users {
  id                    String              @id @default(cuid())
  email                 String              @unique
  name                  String
  password              String
  role                  UserRole            @default(SALES)
  phone                 String?
  address               String?
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  customerVisits        CustomerVisits[]
  ConfirmedDeliveries   DeliveryNotes[]     @relation("WarehouseConfirmDelivery")
  deliveryNotes         DeliveryNotes[]
  fieldVisits           FieldVisit[]
  InvoicesCreated       Invoices[]          @relation("InvoiceCreator")
  InvoicesUpdated       Invoices[]          @relation("InvoiceUpdater")
  ManagementStocks      ManagementStocks[]
  orders                Orders[]
  Productions           Productions[]
  PurchaseOrders        PurchaseOrders[]    @relation("CreatedPurchaseOrders")
  ConfirmedStocks       PurchaseOrders[]    @relation("StockConfirmationUser")
  processedSalesReturns SalesReturns[]      @relation("AdminProcessor")
  requestedSalesReturns SalesReturns[]      @relation("SalesRequester")
  salesTargets          SalesTargets[]
  stockMovements        StockMovements[]
  stockOpnames          StockOpnames[]
  transactions          Transactions[]
  userNotifications     UserNotifications[]

  @@map("users")
}

model SalesTargets {
  id             String     @id @default(cuid())
  userId         String
  targetType     TargetType @default(MONTHLY)
  targetPeriod   String
  targetAmount   Float
  achievedAmount Float      @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           Users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetPeriod])
  @@map("sales_targets")
}

model CompanyTargets {
  id             String     @id @default(cuid())
  targetType     TargetType @default(MONTHLY)
  targetPeriod   String     @unique
  targetAmount   Float
  achievedAmount Float      @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@map("company_targets")
}

model PurchaseOrders {
  id                      String                  @id @default(cuid())
  code                    String                  @unique
  poDate                  DateTime                @default(now())
  dateline                DateTime                @default(now())
  status                  PurchaseOrderStatus     @default(PENDING)
  notes                   String?
  totalAmount             Float                   @default(0)
  orderLevelDiscount      Float                   @default(0) // Potongan keseluruhan
  totalDiscount           Float                   @default(0) // Total semua potongan
  totalTax                Float                   @default(0) // Total pajak
  taxPercentage           Float                   @default(0) // Persentase pajak
  shippingCost            Float                   @default(0) // Biaya pengiriman
  totalPayment            Float                   @default(0) // Total pembayaran akhir
  paymentDeadline         DateTime? // Tenggat pembayaran
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  statusStockConfirmation StockConfirmationStatus @default(WAITING_CONFIRMATION)
  dateStockConfirmation   DateTime?
  userStockConfirmationId String?
  notesStockConfirmation  String?
  orderId                 String
  creatorId               String
  invoices                Invoices?
  items                   PurchaseOrderItems[]
  creator                 Users                   @relation("CreatedPurchaseOrders", fields: [creatorId], references: [id])
  order                   Orders                  @relation(fields: [orderId], references: [id])
  stockConfirmationUser   Users?                  @relation("StockConfirmationUser", fields: [userStockConfirmationId], references: [id])

  @@map("purchase_orders")
}

model PurchaseOrderItems {
  id                     String  @id @default(cuid())
  quantity               Float
  price                  Float   @default(0) // Harga per unit saat PO dibuat (price snapshot)
  discount               Float   @default(0) // Potongan per item
  totalPrice             Float   @default(0) // Total harga untuk item ini (quantity * (price - discount))
  notesStockConfirmation String? // Notes from warehouse regarding stock confirmation

  // Relasi penting
  purchaseOrderId String
  purchaseOrder   PurchaseOrders @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  productId String
  product   Products @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}

model Orders {
  id                   String      @id @default(cuid())
  orderNumber          String      @unique
  orderDate            DateTime    @default(now())
  dueDate              DateTime
  deliveryDate         DateTime?
  status               OrderStatus @default(NEW)
  totalAmount          Float       @default(0)
  notes                String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  customerId           String
  salesId              String
  adminNotes           String?
  canceledAt           DateTime?
  completedAt          DateTime?
  confirmedAt          DateTime?
  confirmedBy          String?
  requiresConfirmation Boolean     @default(false)

  // Tambahan berdasarkan diskusi
  discount           Float         @default(0) // Diskon di level order
  discountType       DiscountType? @default(TOTAL) // Jenis diskon: PER_ITEM atau TOTAL  
  shippingCost       Float         @default(0) // Biaya pengiriman di level order
  paymentDeadline    DateTime? // Tenggat pembayaran
  deliveryAddress    String // Alamat pengiriman spesifik untuk order ini
  deliveryCity       String? // Kota pengiriman (opsional)
  deliveryPostalCode String? // Kode pos pengiriman (opsional)
  deliveryNotesOrder String? // Catatan khusus untuk pengiriman dari sisi order

  deliveryNotes  DeliveryNotes?
  orderItems     OrderItems[]
  customer       Customers        @relation(fields: [customerId], references: [id])
  sales          Users            @relation(fields: [salesId], references: [id])
  salesReturns   SalesReturns[]
  StockMovements StockMovements[]
  purchaseOrders PurchaseOrders[]

  @@map("orders")
}

model OrderItems {
  id         String   @id @default(cuid())
  quantity   Float
  price      Float
  discount   Float    @default(0) // Diskon per item
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orderId    String
  productId  String
  orders     Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  products   Products @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model DeliveryNotes {
  id                String            @id @default(cuid())
  deliveryNumber    String            @unique
  deliveryDate      DateTime          @default(now())
  status            DeliveryStatus    @default(PENDING)
  driverName        String
  vehicleNumber     String
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  customerId        String
  orderId           String            @unique
  warehouseUserId   String
  statusPreparation PreparationStatus @default(WAITING_PREPARATION)
  datePreparation   DateTime?
  userPreparationId String?
  notesPreparation  String?
  customers         Customers         @relation(fields: [customerId], references: [id])
  orders            Orders            @relation(fields: [orderId], references: [id])
  userPreparation   Users?            @relation("WarehouseConfirmDelivery", fields: [userPreparationId], references: [id])
  users             Users             @relation(fields: [warehouseUserId], references: [id])

  @@map("delivery_notes")
}

model Invoices {
  id              String          @id @default(cuid())
  code            String          @unique
  invoiceDate     DateTime        @default(now())
  dueDate         DateTime
  status          InvoiceStatus   @default(DRAFT)
  paymentStatus   PaymentStatus   @default(UNPAID)
  isProforma      Boolean         @default(false)
  subtotal        Float           @default(0)
  tax             Float           @default(0)
  discount        Float           @default(0)
  totalAmount     Float           @default(0)
  paidAmount      Float           @default(0)
  remainingAmount Float           @default(0)
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdBy       String?
  updatedBy       String?
  customerId      String
  purchaseOrderId String?         @unique
  invoiceItems    InvoiceItems[]
  creator         Users?          @relation("InvoiceCreator", fields: [createdBy], references: [id])
  customer        Customers       @relation(fields: [customerId], references: [id])
  purchaseOrder   PurchaseOrders? @relation(fields: [purchaseOrderId], references: [id])
  updater         Users?          @relation("InvoiceUpdater", fields: [updatedBy], references: [id])
  payments        Payments[]
  salesReturns    SalesReturns[]

  @@map("invoices")
}

model InvoiceItems {
  id         String   @id @default(cuid())
  quantity   Float
  price      Float
  discount   Float    @default(0)
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoiceId  String
  productId  String
  invoices   Invoices @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  products   Products @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

model Payments {
  id          String   @id @default(cuid())
  paymentDate DateTime @default(now())
  amount      Float
  method      String
  reference   String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoiceId   String
  invoice     Invoices @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model Transactions {
  id               String             @id @default(cuid())
  transactionDate  DateTime           @default(now())
  type             TransactionType
  amount           Float
  description      String
  category         String
  reference        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           String?
  transactionItems TransactionItems[]
  user             Users?             @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model TransactionItems {
  id            String       @id @default(cuid())
  description   String
  quantity      Float
  price         Float
  totalPrice    Float
  transactionId String
  transaction   Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("transaction_items")
}

model StockMovements {
  id                     String                @id @default(cuid())
  movementDate           DateTime              @default(now())
  type                   StockMovementType
  quantity               Float
  previousStock          Int
  newStock               Int
  reference              String?
  productionItemsId      String?
  ManagementStockItemsId String?
  stockOpnameItemId      String?
  ordersId               String?
  notes                  String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  productId              String
  userId                 String
  managementStockItemId  ManagementStockItems? @relation(fields: [ManagementStockItemsId], references: [id])
  orderId                Orders?               @relation(fields: [ordersId], references: [id])
  products               Products              @relation(fields: [productId], references: [id])
  productionLogItemId    ProductionItems?      @relation(fields: [productionItemsId], references: [id])
  stockOpnameItem        StockOpnameItems?     @relation(fields: [stockOpnameItemId], references: [id], onDelete: Cascade)
  users                  Users                 @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model StockOpnames {
  id               String             @id @default(cuid())
  code             String             @unique
  opnameDate       DateTime           @default(now())
  status           OpnameStatus       @default(RECONCILED)
  notes            String?
  conductedById    String
  ManagementStocks ManagementStocks[]
  stockOpnameItems StockOpnameItems[]
  conductedBy      Users              @relation(fields: [conductedById], references: [id])

  @@map("stock_opnames")
}

model StockOpnameItems {
  id             String           @id @default(cuid())
  systemStock    Int
  physicalStock  Int
  difference     Int
  notes          String?
  opnameId       String
  productId      String
  StockMovements StockMovements[]
  stockOpname    StockOpnames     @relation(fields: [opnameId], references: [id], onDelete: Cascade)
  product        Products         @relation(fields: [productId], references: [id])

  @@map("stock_opname_items")
}

model SalesReturns {
  id               String             @id @default(cuid())
  returnDate       DateTime           @default(now())
  reason           String
  status           ReturnStatus       @default(REQUESTED)
  notes            String?
  orderId          String?
  invoiceId        String
  requesterId      String
  processorId      String?
  salesReturnItems SalesReturnItems[]
  invoice          Invoices           @relation(fields: [invoiceId], references: [id])
  order            Orders?            @relation(fields: [orderId], references: [id])
  processor        Users?             @relation("AdminProcessor", fields: [processorId], references: [id])
  requester        Users              @relation("SalesRequester", fields: [requesterId], references: [id])

  @@map("sales_returns")
}

model SalesReturnItems {
  id          String       @id @default(cuid())
  quantity    Float
  returnId    String
  productId   String
  product     Products     @relation(fields: [productId], references: [id])
  salesReturn SalesReturns @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@map("sales_return_items")
}

model Productions {
  id             String            @id @default(cuid())
  code           String            @unique
  productionDate DateTime          @default(now())
  status         ProductionStatus  @default(COMPLETED)
  notes          String?
  producedById   String
  items          ProductionItems[]
  producedBy     Users             @relation(fields: [producedById], references: [id])

  @@map("production_logs")
}

model ProductionItems {
  id              String           @id @default(cuid())
  quantity        Float
  productionLogId String
  productId       String
  notes           String?
  product         Products         @relation(fields: [productId], references: [id])
  productionLog   Productions      @relation(fields: [productionLogId], references: [id], onDelete: Cascade)
  StockMovements  StockMovements[]

  @@map("production_log_items")
}

model ManagementStocks {
  id             String                 @id @default(cuid())
  code           String                 @unique
  managementDate DateTime               @default(now())
  status         ManagementStockStatus  @default(IN)
  notes          String?
  producedById   String
  stockOpnameId  String?
  items          ManagementStockItems[]
  producedBy     Users                  @relation(fields: [producedById], references: [id])
  stockOpname    StockOpnames?          @relation(fields: [stockOpnameId], references: [id], onDelete: Cascade)

  @@map("management_stocks")
}

model ManagementStockItems {
  id                String           @id @default(cuid())
  quantity          Float
  managementStockId String
  productId         String
  notes             String?
  stockOpnamesId    String?
  managementStock   ManagementStocks @relation(fields: [managementStockId], references: [id], onDelete: Cascade)
  product           Products         @relation(fields: [productId], references: [id])
  StockMovements    StockMovements[]

  @@map("management_stock_items")
}

model FieldVisit {
  id           String    @id @default(cuid())
  salesId      String
  storeId      String?
  storeName    String?
  storeAddress String?
  visitDate    DateTime  @default(now())
  checkInTime  DateTime  @default(now())
  checkOutTime DateTime?
  latitude     Float
  longitude    Float
  photos       String[]  @default([])
  notes        String?
  visitPurpose String
  result       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sales        Users     @relation(fields: [salesId], references: [id], onDelete: Cascade)
  store        Store?    @relation(fields: [storeId], references: [id])

  @@map("field_visits")
}

model CustomerVisits {
  id         String    @id @default(cuid())
  visitDate  DateTime  @default(now())
  latitude   Float
  longitude  Float
  notes      String?
  photoUrl   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customerId String
  salesId    String
  customers  Customers @relation(fields: [customerId], references: [id])
  users      Users     @relation(fields: [salesId], references: [id])

  @@map("customer_visits")
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model Notifications {
  id                String              @id @default(cuid())
  title             String
  message           String
  type              String
  isGlobal          Boolean             @default(false)
  isRead            Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userNotifications UserNotifications[]

  @@map("notifications")
}

model UserNotifications {
  id             String        @id @default(cuid())
  isRead         Boolean       @default(false)
  readAt         DateTime?
  createdAt      DateTime      @default(now())
  userId         String
  notificationId String
  notifications  Notifications @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  users          Users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
  @@map("user_notifications")
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  OVERPAID
}

enum OrderStatus {
  NEW
  PROCESSING
  COMPLETED
  CANCELLED
  PENDING_CONFIRMATION
  IN_PROCESS
  CANCELED
}

enum StockMovementType {
  PRODUCTION_IN
  SALES_OUT
  RETURN_IN
  ADJUSTMENT_IN
  ADJUSTMENT_OUT
  OPNAME_ADJUSTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum UserRole {
  OWNER
  ADMIN
  SALES
  WAREHOUSE
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  COMPLETED
}

enum OpnameStatus {
  IN_PROGRESS
  COMPLETED
  RECONCILED
}

enum TargetType {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ProductionStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ManagementStockStatus {
  IN
  OUT
  OPNAME_ADJUSTMENT
}

enum PurchaseOrderStatus {
  PENDING
  PROCESSING
  READY_FOR_DELIVERY
  COMPLETED
  CANCELLED
}

enum StockConfirmationStatus {
  WAITING_CONFIRMATION
  STOCK_AVAILABLE
  INSUFFICIENT_STOCK
}

enum PreparationStatus {
  WAITING_PREPARATION // Menunggu barang disiapkan gudang
  PREPARING // Sedang disiapkan
  READY_FOR_DELIVERY // Barang sudah disiapkan & siap kirim
  CANCELLED_PREPARATION // Pembatalan persiapan
}

enum DiscountType {
  PER_ITEM // Diskon per item
  TOTAL // Diskon total order
}
